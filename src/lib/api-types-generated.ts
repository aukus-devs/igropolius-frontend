/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "MainBonusCardType".
 */
export type MainBonusCardType =
  | "adjust-roll-by1"
  | "choose-1-die"
  | "skip-prison-day"
  | "reroll-game"
  | "evade-street-tax"
  | "evade-map-tax"
  | "game-help-allowed";
export type ReceivedAt = number;
export type ReceivedOnSector = number;
export type Timestamp = number;
export type EventType = "bonus-card";
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "BonusCardEventType".
 */
export type BonusCardEventType = "received" | "used" | "dropped" | "stolen-from-me" | "stolen-by-me";
export type BonusType = BonusCardType | InstantCardType;
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "BonusCardType".
 */
export type BonusCardType =
  | "adjust-roll-by1"
  | "choose-1-die"
  | "skip-prison-day"
  | "reroll-game"
  | "evade-street-tax"
  | "evade-map-tax"
  | "game-help-allowed"
  | "receive-1-percent-from-all"
  | "receive-scores-for-place"
  | "receive-5-percent-or-reroll"
  | "receive-3-percent"
  | "leaders-lose-percents"
  | "receive-1-percent-plus-20"
  | "upgrade-next-building"
  | "downgrade-next-building"
  | "lose-2-percents"
  | "reroll"
  | "reroll-and-roll"
  | "lose-card-or-3-percent";
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "InstantCardType".
 */
export type InstantCardType =
  | "receive-1-percent-from-all"
  | "receive-scores-for-place"
  | "receive-5-percent-or-reroll"
  | "receive-3-percent"
  | "leaders-lose-percents"
  | "receive-1-percent-plus-20"
  | "upgrade-next-building"
  | "downgrade-next-building"
  | "lose-2-percents"
  | "reroll"
  | "reroll-and-roll"
  | "lose-card-or-3-percent";
export type SectorId = number;
export type StolenFromPlayer = number | null;
export type StolenBy = number | null;
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "NotificationType".
 */
export type NotificationType = "important" | "standard";
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "NotificationEventType".
 */
export type NotificationEventType =
  | "game-completed"
  | "game-reroll"
  | "game-drop"
  | "pay-sector-tax"
  | "building-income"
  | "pay-map-tax"
  | "bonus-increase"
  | "card-stolen"
  | "card-lost"
  | "event-ending-soon"
  | "message";
export type OtherPlayerId = number | null;
export type Scores = number | null;
export type SectorId1 = number | null;
export type GameTitle = string | null;
export type CardName = string | null;
export type EventEndTime = number | null;
export type MessageText = string | null;
export type EventEndTime1 = number;
export type MessageText1 = string;
export type Success = boolean;
export type Message = string;
export type PlayerId = number;
export type MessageText2 = string;
export type PlayerId1 = number;
export type OtherPlayerId1 = number | null;
export type Scores1 = number | null;
export type SectorId2 = number | null;
export type GameTitle1 = string | null;
export type CardName1 = string | null;
export type EventEndTime2 = number | null;
export type MessageText3 = string | null;
export type Id = number;
export type ModerFor = number | null;
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "PlayerTurnState".
 */
export type PlayerTurnState =
  | "rolling-dice"
  | "using-dice-bonuses"
  | "using-prison-bonuses"
  | "rolling-bonus-card"
  | "filling-game-review"
  | "using-map-tax-bonuses"
  | "using-street-tax-bonuses"
  | "dropping-card-after-game-drop"
  | "dropping-card-after-instant-roll"
  | "entering-prison"
  | "stealing-bonus-card"
  | "choosing-building-sector";
export type LastRollResult = number[];
export type HasUpgradeBonus = boolean;
export type HasDowngradeBonus = boolean;
export type IsRandomOrgResult = boolean;
export type RandomOrgCheckForm = string | null;
export type RandomOrgFailReason = string | null;
export type Data = number[];
export type RollId = number;
export type Dice = number[];
export type RandomOrgLink = string | null;
export type GameTitle2 = string;
export type GameReview = string;
export type VodLinks = string | null;
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "GameCompletionType".
 */
export type GameCompletionType = "completed" | "drop" | "reroll";
export type Timestamp1 = number;
export type EventType1 = "game";
export type GameTitle3 = string;
export type GameCover = string | null;
export type SectorId3 = number;
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "GameLength".
 */
export type GameLength = "" | "2-5" | "5-10" | "10-15" | "15-20" | "20-25" | "25+";
export type ReceivedAt1 = number;
export type ReceivedOnSector1 = number;
export type Id1 = number;
export type Name = string;
export type Cover = string | null;
export type ReleaseYear = number | null;
export type Games = IgdbGameSummary[];
export type Query = string;
export type Limit = number;
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "InstantCardResult".
 */
export type InstantCardResult = "reroll" | "card-lost" | "score-received" | "scores-lost";
export type Username = string;
export type Password = string;
export type Token = string;
export type NotificationIds = number[];
export type Timestamp2 = number;
export type EventType2 = "player-move";
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "PlayerMoveType".
 */
export type PlayerMoveType = "dice-roll" | "train-ride" | "drop-to-prison";
export type SectorFrom = number;
export type SectorTo = number;
export type AdjustedRoll = number;
export type DiceRoll = number[];
export type MapCompleted = boolean;
export type BonusesUsed = MainBonusCardType[];
export type NewSectorId = number;
export type Content = string;
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "RulesCategory".
 */
export type RulesCategory = "general" | "gameplay" | "donations";
export type Id2 = number;
export type NotificationType1 = string;
export type CreatedAt = number;
export type OtherPlayerId2 = number | null;
export type Scores2 = number | null;
export type SectorId4 = number | null;
export type GameTitle4 = string | null;
export type CardName2 = string | null;
export type EventEndTime3 = number | null;
export type MessageText4 = string | null;
export type Notifications = NotificationItem[];
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "TaxType".
 */
export type TaxType = "street-tax" | "map-tax";
export type Id3 = number;
export type Username1 = string;
export type FirstName = string;
export type UrlHandle = string;
export type IsOnline = boolean;
export type CurrentGame = string | null;
export type CurrentGameCover = string | null;
export type CurrentGameUpdatedAt = number | null;
export type CurrentGameDuration = number | null;
export type OnlineCount = number;
export type CurrentAucTotalSum = number | null;
export type CurrentAucStartedAt = number | null;
export type PointaucToken = string | null;
export type StreamPlatform = "twitch" | "vk" | "kick" | "none";
export type TwitchStreamLink = string | null;
export type VkStreamLink = string | null;
export type KickStreamLink = string | null;
export type TelegramLink = string | null;
export type DonationLink = string | null;
export type AvatarLink = string | null;
export type IsActive = boolean;
export type SectorId5 = number;
export type TotalScore = number;
export type MapsCompleted = number;
export type Id4 = number;
export type CreatedAt1 = number;
export type SectorId6 = number;
export type Title = string;
export type Review = string;
export type Rating = number;
export type LengthBonus = number | null;
export type Duration = number | null;
export type VodLinks1 = string | null;
export type Cover1 = string | null;
export type Games1 = PlayerGame[];
export type BonusCards = ActiveBonusCard[];
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "Role".
 */
export type Role = "player" | "moder" | "admin" | "prison";
export type Color = string;
export type ModelName = string;
export type Timestamp3 = number;
export type Timestamp4 = number;
export type EventType3 = "score-change";
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "ScoreChangeType".
 */
export type ScoreChangeType =
  | "game-completed"
  | "game-dropped"
  | "street-tax"
  | "street-income"
  | "map-tax"
  | "instant-card";
export type Amount = number;
export type Reason = string;
export type SectorId7 = number;
export type ScoreBefore = number;
export type ScoreAfter = number;
export type IncomeFromPlayer = number | null;
export type BonusCardOwner = number | null;
export type Events = (GameEvent | BonusCardEvent | ScoreChangeEvent | MoveEvent)[];
export type Players = PlayerDetails[];
export type SelectedDie = number | null;
export type AdjustBy1 = number | null;
export type RideTrain = boolean;
export type NewSectorId1 = number;
export type MapCompleted1 = boolean;
export type Num = number;
export type Min = number;
export type Max = number;
export type RollId1 = number;
export type IsRandomOrgResult1 = boolean;
export type RandomOrgCheckForm1 = string | null;
export type Data1 = number[];
export type RandomOrgFailReason1 = string | null;
export type Content1 = string;
export type CreatedAt2 = number;
export type Versions = RulesVersion[];
export type Title1 = string;
export type Review1 = string;
export type Rating1 = number;
export type VodLinks2 = string | null;
export type Scores3 = number;
export type GameId = number | null;
export type NewSectorId2 = number;
export type EventStartTime = number | null;
export type EventEndTime4 = number | null;
export type PlayerId2 = number;
export type Success1 = boolean;
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "StreamPlatform".
 */
export type StreamPlatform1 = "twitch" | "vk" | "kick" | "none";

export interface ApiSchema {
  [k: string]: unknown;
}
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "ActiveBonusCard".
 */
export interface ActiveBonusCard {
  bonus_type: MainBonusCardType;
  received_at: ReceivedAt;
  received_on_sector: ReceivedOnSector;
}
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "BonusCardEvent".
 */
export interface BonusCardEvent {
  timestamp: Timestamp;
  event_type: EventType;
  subtype: BonusCardEventType;
  bonus_type: BonusType;
  sector_id: SectorId;
  stolen_from_player?: StolenFromPlayer;
  stolen_by?: StolenBy;
}
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "CreateAllPlayersNotificationRequest".
 */
export interface CreateAllPlayersNotificationRequest {
  notification_type: NotificationType;
  event_type: NotificationEventType;
  other_player_id?: OtherPlayerId;
  scores?: Scores;
  sector_id?: SectorId1;
  game_title?: GameTitle;
  card_name?: CardName;
  event_end_time?: EventEndTime;
  message_text?: MessageText;
}
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "CreateEventEndingNotificationRequest".
 */
export interface CreateEventEndingNotificationRequest {
  event_end_time: EventEndTime1;
}
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "CreateMessageNotificationRequest".
 */
export interface CreateMessageNotificationRequest {
  notification_type: NotificationType;
  message_text: MessageText1;
}
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "CreateNotificationResponse".
 */
export interface CreateNotificationResponse {
  success: Success;
  message: Message;
}
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "CreatePlayerMessageNotificationRequest".
 */
export interface CreatePlayerMessageNotificationRequest {
  player_id: PlayerId;
  notification_type: NotificationType;
  message_text: MessageText2;
}
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "CreatePlayerNotificationRequest".
 */
export interface CreatePlayerNotificationRequest {
  player_id: PlayerId1;
  notification_type: NotificationType;
  event_type: NotificationEventType;
  other_player_id?: OtherPlayerId1;
  scores?: Scores1;
  sector_id?: SectorId2;
  game_title?: GameTitle1;
  card_name?: CardName1;
  event_end_time?: EventEndTime2;
  message_text?: MessageText3;
}
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "CurrentUserResponse".
 */
export interface CurrentUserResponse {
  id: Id;
  moder_for?: ModerFor;
  turn_state: PlayerTurnState;
  last_roll_result: LastRollResult;
  has_upgrade_bonus?: HasUpgradeBonus;
  has_downgrade_bonus?: HasDowngradeBonus;
}
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "DiceRollDetails".
 */
export interface DiceRollDetails {
  is_random_org_result: IsRandomOrgResult;
  random_org_check_form?: RandomOrgCheckForm;
  random_org_fail_reason?: RandomOrgFailReason;
  data: Data;
}
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "DiceRollResult".
 */
export interface DiceRollResult {
  roll_id: RollId;
  dice: Dice;
  random_org_link?: RandomOrgLink;
}
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "DropBonusCardRequest".
 */
export interface DropBonusCardRequest {
  bonus_type: MainBonusCardType;
}
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "EditPlayerGame".
 */
export interface EditPlayerGame {
  game_title: GameTitle2;
  game_review: GameReview;
  vod_links?: VodLinks;
}
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "EventSettingsResponse".
 */
export interface EventSettingsResponse {
  settings?: Settings;
}
export interface Settings {
  [k: string]: string | null;
}
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "GameEvent".
 */
export interface GameEvent {
  timestamp: Timestamp1;
  event_type: EventType1;
  subtype: GameCompletionType;
  game_title: GameTitle3;
  game_cover?: GameCover;
  sector_id: SectorId3;
}
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "GiveBonusCardRequest".
 */
export interface GiveBonusCardRequest {
  bonus_type: MainBonusCardType;
}
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "GiveBonusCardResponse".
 */
export interface GiveBonusCardResponse {
  bonus_type: MainBonusCardType;
  received_at: ReceivedAt1;
  received_on_sector: ReceivedOnSector1;
}
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "IgdbGameSummary".
 */
export interface IgdbGameSummary {
  id: Id1;
  name: Name;
  cover?: Cover;
  release_year?: ReleaseYear;
}
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "IgdbGamesListResponse".
 */
export interface IgdbGamesListResponse {
  games: Games;
}
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "IgdbGamesSearchRequest".
 */
export interface IgdbGamesSearchRequest {
  query: Query;
  limit?: Limit;
}
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "LoginRequest".
 */
export interface LoginRequest {
  username: Username;
  password: Password;
}
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "LoginResponse".
 */
export interface LoginResponse {
  token: Token;
}
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "MarkNotificationsSeenRequest".
 */
export interface MarkNotificationsSeenRequest {
  notification_ids: NotificationIds;
}
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "MoveEvent".
 */
export interface MoveEvent {
  timestamp: Timestamp2;
  event_type: EventType2;
  subtype: PlayerMoveType;
  sector_from: SectorFrom;
  sector_to: SectorTo;
  adjusted_roll: AdjustedRoll;
  dice_roll: DiceRoll;
  dice_roll_json: DiceRollDetails | null;
  map_completed: MapCompleted;
  bonuses_used: BonusesUsed;
}
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "MovePlayerGameRequest".
 */
export interface MovePlayerGameRequest {
  new_sector_id: NewSectorId;
}
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "NewRulesVersionRequest".
 */
export interface NewRulesVersionRequest {
  content: Content;
  category: RulesCategory;
}
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "NotificationItem".
 */
export interface NotificationItem {
  id: Id2;
  notification_type: NotificationType1;
  event_type: NotificationEventType;
  created_at: CreatedAt;
  other_player_id?: OtherPlayerId2;
  scores?: Scores2;
  sector_id?: SectorId4;
  game_title?: GameTitle4;
  card_name?: CardName2;
  event_end_time?: EventEndTime3;
  message_text?: MessageText4;
}
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "NotificationsResponse".
 */
export interface NotificationsResponse {
  notifications: Notifications;
}
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "PayTaxRequest".
 */
export interface PayTaxRequest {
  tax_type: TaxType;
}
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "PlayerDetails".
 */
export interface PlayerDetails {
  id: Id3;
  username: Username1;
  first_name: FirstName;
  url_handle: UrlHandle;
  is_online: IsOnline;
  current_game?: CurrentGame;
  current_game_cover?: CurrentGameCover;
  current_game_updated_at?: CurrentGameUpdatedAt;
  current_game_duration?: CurrentGameDuration;
  online_count?: OnlineCount;
  current_auc_total_sum?: CurrentAucTotalSum;
  current_auc_started_at?: CurrentAucStartedAt;
  pointauc_token?: PointaucToken;
  main_platform?: StreamPlatform;
  twitch_stream_link?: TwitchStreamLink;
  vk_stream_link?: VkStreamLink;
  kick_stream_link?: KickStreamLink;
  telegram_link?: TelegramLink;
  donation_link?: DonationLink;
  avatar_link?: AvatarLink;
  is_active?: IsActive;
  sector_id: SectorId5;
  total_score: TotalScore;
  maps_completed: MapsCompleted;
  games: Games1;
  bonus_cards: BonusCards;
  role: Role;
  color: Color;
  model_name: ModelName;
}
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "PlayerGame".
 */
export interface PlayerGame {
  id: Id4;
  created_at: CreatedAt1;
  status: GameCompletionType;
  sector_id: SectorId6;
  title: Title;
  review: Review;
  rating: Rating;
  length: GameLength;
  length_bonus?: LengthBonus;
  duration?: Duration;
  vod_links?: VodLinks1;
  cover?: Cover1;
}
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "PlayerEventBase".
 */
export interface PlayerEventBase {
  timestamp: Timestamp3;
}
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "PlayerEventsResponse".
 */
export interface PlayerEventsResponse {
  events: Events;
}
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "ScoreChangeEvent".
 */
export interface ScoreChangeEvent {
  timestamp: Timestamp4;
  event_type: EventType3;
  subtype: ScoreChangeType;
  amount: Amount;
  reason: Reason;
  sector_id: SectorId7;
  score_before: ScoreBefore;
  score_after: ScoreAfter;
  income_from_player?: IncomeFromPlayer;
  bonus_card?: BonusCardType | null;
  bonus_card_owner?: BonusCardOwner;
}
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "PlayerListResponse".
 */
export interface PlayerListResponse {
  players: Players;
}
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "PlayerMoveRequest".
 */
export interface PlayerMoveRequest {
  type: PlayerMoveType;
  selected_die?: SelectedDie;
  adjust_by_1?: AdjustBy1;
  ride_train?: RideTrain;
}
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "PlayerMoveResponse".
 */
export interface PlayerMoveResponse {
  new_sector_id: NewSectorId1;
  map_completed: MapCompleted1;
}
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "RollDiceRequest".
 */
export interface RollDiceRequest {
  num?: Num;
  min?: Min;
  max?: Max;
}
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "RollDiceResponse".
 */
export interface RollDiceResponse {
  roll_id: RollId1;
  is_random_org_result: IsRandomOrgResult1;
  random_org_check_form?: RandomOrgCheckForm1;
  data: Data1;
  random_org_fail_reason?: RandomOrgFailReason1;
}
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "RulesResponse".
 */
export interface RulesResponse {
  versions: Versions;
}
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "RulesVersion".
 */
export interface RulesVersion {
  content: Content1;
  category: RulesCategory;
  created_at: CreatedAt2;
}
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "SavePlayerGameRequest".
 */
export interface SavePlayerGameRequest {
  status: GameCompletionType;
  title: Title1;
  review: Review1;
  rating: Rating1;
  length: GameLength;
  vod_links?: VodLinks2;
  scores: Scores3;
  game_id?: GameId;
}
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "SavePlayerGameResponse".
 */
export interface SavePlayerGameResponse {
  new_sector_id: NewSectorId2;
}
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "SetEventEndTimeRequest".
 */
export interface SetEventEndTimeRequest {
  event_start_time?: EventStartTime;
  event_end_time?: EventEndTime4;
}
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "StealBonusCardRequest".
 */
export interface StealBonusCardRequest {
  player_id: PlayerId2;
  bonus_type: MainBonusCardType;
}
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "StreamCheckResponse".
 */
export interface StreamCheckResponse {
  success: Success1;
  stats: Stats;
}
export interface Stats {
  [k: string]: unknown;
}
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "UpdatePlayerTurnStateRequest".
 */
export interface UpdatePlayerTurnStateRequest {
  turn_state: PlayerTurnState;
}
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "UseBonusCard".
 */
export interface UseBonusCard {
  bonus_type: MainBonusCardType;
}
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "UseBonusCardRequest".
 */
export interface UseBonusCardRequest {
  bonus_type: MainBonusCardType;
}
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "UseInstantCardRequest".
 */
export interface UseInstantCardRequest {
  card_type: InstantCardType;
  card_to_lose?: MainBonusCardType | null;
}
/**
 * This interface was referenced by `ApiSchema`'s JSON-Schema
 * via the `definition` "UseInstantCardResponse".
 */
export interface UseInstantCardResponse {
  result?: InstantCardResult | null;
}
